@page
@inject VeeValidateSnippets VeeValidateSnippets
@model AttributesModel
@{
    ViewData["Title"] = "Attributes Example";
}
<h1>Validation Attributes</h1>
<p></p>
<ul>
    <li>
        <a href="#compare-attribute">[Compare]</a>
    </li>
    <li>
        <a href="#credit-card-attribute">[CreditCard]</a>
    </li>
    <li>
        <a href="#email-address-attribute">[EmailAddress]</a>
    </li>
    <li>
        <a href="#file-extensions-attribute">[FileExtensions]</a>
    </li>
    <li>
        <a href="#range-attribute">[Range]</a>
    </li>
    <li>
        <a href="#regex-attribute">[RegularExpression]</a>
    </li>
    <li>
        <a href="#required-attribute">[Required]</a>
    </li>
    <li>
        <a href="#max-length-attribute">[MaxLength]</a>
    </li>
    <li>
        <a href="#min-length-attribute">[MinLength]</a>
    </li>
    <li>
        <a style="text-decoration: line-through">[Phone]</a>
    </li>
    <li>
        <a href="#string-length-attribute">[StringLength]</a>
    </li>
    <li>
        <a href="#url-attribute">[Url]</a>
    </li>
</ul>

<div id="app">
    <div asp-validation-summary="ModelOnly"></div>

    <form asp-page="Attribute" method="post" novalidate="novalidate" v-on:submit.prevent="submit">
        <div>
            <h2 id="compare-attribute">[Compare]</h2>
            <div class="input-field">
                <input asp-for="Compare" placeholder="Enter a value" v-model="Compare"/>
                <label asp-for="Compare"></label>
                <input asp-for="CompareTo" placeholder="Confirm a value" v-model="CompareTo"/>
                <span asp-validation-for="Compare"></span>
            </div>
        </div>
        <div>
            <h2 id="credit-card-attribute">[CreditCard]</h2>
            <div class="input-field">
                <input asp-for="CreditCard" v-model="CreditCard"/>
                <label asp-for="CreditCard"></label>
                <span asp-validation-for="CreditCard"></span>
            </div>
        </div>
        <div>
            <h2 id="email-address-attribute">[EmailAddress]</h2>
            <div class="input-field">
                <input asp-for="EmailAddress" v-model="EmailAddress"/>
                <label asp-for="EmailAddress"></label>
                <span asp-validation-for="EmailAddress"></span>
            </div>
        </div>
        <div>
            <h2 id="file-extensions-attribute">[FileExtensions]</h2>
            <div class="file-field input-field">
                <div class="btn">
                    <input asp-for="FileExtensions" type="file" />
                    <label asp-for="FileExtensions"></label>
                </div>
                <div class="file-path-wrapper">
                    <input class="file-path" type="text">
                </div>
                <span asp-validation-for="FileExtensions"></span>
            </div>
        </div>
        <div>
            <h2 id="range-attribute">[Range]</h2>
            <div class="input-field">
                <input asp-for="Range" v-model="Range"/>
                <label asp-for="Range"></label>
                <span asp-validation-for="Range"></span>
            </div>
            <div class="input-field">
                <input asp-for="DateRange" v-model="DateRange" v-date />
                <label asp-for="DateRange"></label>
                <span asp-validation-for="DateRange"></span>
            </div>
        </div>
        <div>
            <h2 id="regex-attribute">[RegularExpression]</h2>
            <div class="input-field">
                <input asp-for="Regex" v-model="Regex"/>
                <label asp-for="Regex"></label>
                <span asp-validation-for="Regex"></span>
            </div>
        </div>
        <div>
            <h2 id="required-attribute">[Required]</h2>
            <div class="input-field">
                <input asp-for="Required" v-model="Required"/>
                <label asp-for="Required"></label>
                <span asp-validation-for="Required"></span>
            </div>
        </div>
        <div>
            <h2 id="max-length-attribute">[MaxLength]</h2>
            <div class="input-field">
                <input asp-for="MaxLength" v-model="MaxLength"/>
                <label asp-for="MaxLength"></label>
                <span asp-validation-for="MaxLength"></span>
            </div>
        </div>
        <div>
            <h2 id="min-length-attribute">[MinLength]</h2>
            <div class="input-field">
                <input asp-for="MinLength" v-model="MinLength"/>
                <label asp-for="MinLength"></label>
                <span asp-validation-for="MinLength"></span>
            </div>
        </div>
        <div>
            <h2 id="string-length-attribute">[StringLength]</h2>
            <div class="input-field">
                <input asp-for="StringLength" v-model="StringLength"/>
                <label asp-for="StringLength"></label>
                <span asp-validation-for="StringLength"></span>
            </div>
        </div>
        <div>
            <h2 id="url-attribute">[Url]</h2>
            <div class="input-field">
                <input asp-for="Url" v-model="Url"/>
                <label asp-for="Url"></label>
                <span asp-validation-for="Url"></span>
            </div>
        </div>
        <input type="submit" value="Submit"/>
    </form>
</div>

@section Scripts{
    @Html.Raw(VeeValidateSnippets.ValidationSummaryMixin)
    <script>
        Vue.directive('date', {
            bind: function (el, binding, vnode) {
                // Notify vue instance when the value changes
                el.addEventListener('change', function () {
                    vnode.context.$emit("change");
                });
            },
            inserted: function(el) {
                // If not touch enabled browser that supports date inputs.
                if (!Modernizr.touch || !Modernizr.inputtypes.date) {
                    // Change the type to text to prevent native date control from appearing.
                    el.type = 'text';
                    // Initialise the Materliaze datepicker control.
                    M.Datepicker.init(el,
                        {
                            format: 'dd/mm/yyyy',
                            setDefaultDate: true,
                            autoClose: true
                        });
                }
            }
        })

        new Vue({
            el: "#app",
            data: @Json.Serialize(new AttributesModel()),
            methods: {
                submit: function() {
                    var self = this;
                    axios.post('/api/Attributes', this.$data)
                        .then(function(response) {
                            alert("the form is validd unhandled error occurred!");
                        })
                        .catch(function(error) {
                            if (error.response.status === 400) {
                                self.errors.clear();
                                for (var key in error.response.data) {
                                    if (error.response.data.hasOwnProperty(key)) {
                                        self.errors.add(key, error.response.data[key][0]);
                                    }
                                }
                                return;
                            }
                            alert("an unhandled error occurred!");
                        });
                }
            }
        })
    </script>
}